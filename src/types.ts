import type {Database} from './db/database.types';

// ===============================
// Common Types
// ===============================

/**
 * Represents the possible statuses of a generated plan
 */
export type PlanStatusType = 'generated' | 'accepted' | 'rejected';

// ===============================
// Base Entity Types
// ===============================

/**
 * Represents a user profile with travel preferences
 */
export type ProfileEntity = {
  userId: string;
  activityLevel: string;
  favoriteSports: string[];
  travelerType: string;
  homeLocation: string;
  createdAt: string;
  updatedAt: string;
};

/**
 * Represents a travel note created by a user
 */
export type NoteEntity = {
  id: string;
  userId: string;
  content: string;
  noteCategory: string | null;
  continent: string | null;
  country: string | null;
  season: string | null;
  travelDate: string | null;
  accommodationType: string | null;
  transportType: string | null;
  plannedActivities: string | null;
  numPeople: number | null;
  createdAt: string;
  updatedAt: string;
};

/**
 * Represents a plan generated by AI based on user notes
 */
export type GeneratedPlanEntity = {
  id: string;
  userId: string;
  planDetails: Database;
  status: PlanStatusType;
  createdAt: string;
  updatedAt: string;
};

/**
 * Represents a link between a plan and the notes it was generated from
 */
export type PlanNoteEntity = {
  planId: string;
  noteId: string;
};

/**
 * Represents a user's rating of a generated plan
 */
export type PlanRatingEntity = {
  id: string;
  userId: string;
  planId: string;
  rating: number;
  createdAt: string;
};

// ===============================
// Authentication DTOs
// ===============================

/**
 * DTO for user registration request
 */
export interface RegisterRequestDto {
  email: string;
  password: string;
}

/**
 * DTO for user registration response
 */
export interface RegisterResponseDto {
  userId: string;
  email: string;
}

/**
 * DTO for user login request
 */
export interface LoginRequestDto {
  email: string;
  password: string;
}

/**
 * DTO for user login response
 */
export interface LoginResponseDto {
  token: string;
  expiresIn: number;
}

/**
 * DTO for password reset request
 */
export interface ForgotPasswordRequestDto {
  email: string;
}

/**
 * DTO for password reset with token
 */
export interface ResetPasswordRequestDto {
  token: string;
  password: string;
}

// ===============================
// Profile DTOs
// ===============================

/**
 * DTO for profile response
 * Extends the ProfileEntity with additional UI-specific fields
 */
export interface ProfileResponseDto extends ProfileEntity {
  autoGenerate: boolean;
}

/**
 * DTO for profile creation
 */
export interface CreateProfileRequestDto {
  activityLevel: string;
  favoriteSports: string[];
  travelerType: string;
  homeLocation: string;
  autoGenerate: boolean;
}

/**
 * DTO for profile update
 * All fields are optional to allow partial updates
 */
export interface UpdateProfileRequestDto {
  activityLevel?: string;
  favoriteSports?: string[];
  travelerType?: string;
  homeLocation?: string;
  autoGenerate?: boolean;
}

/**
 * DTO for account deletion with password confirmation
 */
export interface DeleteAccountRequestDto {
  password: string;
}

// ===============================
// Note DTOs
// ===============================

/**
 * DTO for note creation
 */
export interface CreateNoteRequestDto {
  noteCategory?: string;
  content: string;
  continent?: string;
  country?: string;
  season?: string;
  travelDate?: string;
  accommodationType?: string;
  transportType?: string;
  plannedActivities?: string;
  numPeople?: number;
}

/**
 * DTO for note update
 * All fields are optional to allow partial updates
 */
export interface UpdateNoteRequestDto {
  noteCategory?: string;
  content?: string;
  continent?: string;
  country?: string;
  season?: string;
  travelDate?: string;
  accommodationType?: string;
  transportType?: string;
  plannedActivities?: string;
  numPeople?: number;
}

/**
 * DTO for note response
 */
export interface NoteResponseDto extends NoteEntity {}

/**
 * DTO for paginated notes response
 */
export interface NotesListResponseDto {
  notes: NoteResponseDto[];
  total: number;
  page: number;
  size: number;
}

// ===============================
// Plan DTOs
// ===============================

/**
 * DTO for generated plan summary in listings
 */
export interface GeneratedPlanSummaryDto {
  id: string;
  userId: string;
  status: PlanStatusType;
  createdAt: string;
  updatedAt: string;
}

/**
 * DTO for detailed plan response
 */
export interface GeneratedPlanResponseDto {
  id: string;
  userId: string;
  planDetails: Database;
  status: PlanStatusType;
  notes: string[]; // Array of note IDs
  createdAt: string;
  updatedAt: string;
}

/**
 * DTO for plan generation request
 */
export interface GeneratePlanRequestDto {
  noteIds?: string[]; // Optional array of note IDs
  force?: boolean;    // Whether to ignore autoGenerate setting
}

/**
 * DTO for plan generation response
 */
export interface GeneratePlanResponseDto {
  planId: string;
  status: PlanStatusType;
}

/**
 * DTO for plan status update
 */
export interface UpdatePlanStatusRequestDto {
  status: Extract<PlanStatusType, 'accepted' | 'rejected'>;
  reason?: string; // Optional reason for rejection
}

/**
 * DTO for paginated plans response
 */
export interface PlansListResponseDto {
  plans: GeneratedPlanSummaryDto[];
  total: number;
  page: number;
  size: number;
}

// ===============================
// Rating DTOs
// ===============================

/**
 * DTO for plan rating response
 */
export interface PlanRatingResponseDto extends PlanRatingEntity {}

/**
 * DTO for rating list response
 */
export interface PlanRatingsListResponseDto {
  ratings: PlanRatingResponseDto[];
}

/**
 * DTO for adding a rating
 */
export interface AddRatingRequestDto {
  rating: number; // 1-5
}

/**
 * DTO for updating a rating
 */
export interface UpdateRatingRequestDto {
  rating: number; // 1-5
}

// ===============================
// Dashboard DTOs
// ===============================

/**
 * DTO for dashboard response
 */
export interface DashboardResponseDto {
  notesCount: number;
  generatedPlansCount: number;
  acceptedPlansCount: number;
  recentPlans: GeneratedPlanSummaryDto[];
}

// ===============================
// Command Models
// ===============================

/**
 * Command model for generating a plan
 */
export interface GeneratePlanCommand {
  userId: string;
  noteIds: string[] | null;
  forceGenerate: boolean;
}

/**
 * Command model for rating a plan
 */
export interface RatePlanCommand {
  userId: string;
  planId: string;
  rating: number;
}

/**
 * Command model for updating plan status
 */
export interface UpdatePlanStatusCommand {
  userId: string;
  planId: string;
  status: Extract<PlanStatusType, 'accepted' | 'rejected'>;
  reason?: string;
}

/**
 * Command model for creating a user note
 */
export interface CreateNoteCommand extends CreateNoteRequestDto {
  userId: string;
}

/**
 * Command model for updating a user note
 */
export interface UpdateNoteCommand extends UpdateNoteRequestDto {
  id: string;
  userId: string;
}

/**
 * Command model for creating a user profile
 */
export interface CreateProfileCommand extends CreateProfileRequestDto {
  userId: string;
}

/**
 * Command model for updating a user profile
 */
export interface UpdateProfileCommand extends UpdateProfileRequestDto {
  userId: string;
}
